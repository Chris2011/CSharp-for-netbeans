package net.chrizzly.csharp4netbeans.filetypes.cs.lexer;

/**
 *
 * @author Chrl
 */
public enum TokenType {
    BYTE_ORDER_MARK(1, "character"),
    SINGLE_LINE_DOC_COMMENT(2, "comment"),
    DELIMITED_DOC_COMMENT(3, "comment"),
    SINGLE_LINE_COMMENT(4, "comment"),
    DELIMITED_COMMENT(5, "comment"),
    WHITESPACES(6, "whitespace"),
    SHARP(7, "comment"),
    ABSTRACT(8, "keyword"),
    ADD(9, "keyword"),
    ALIAS(10, "keyword"),
    ARGLIST(11, "keyword"),
    AS(12, "keyword"),
    ASCENDING(13, "keyword"),
    ASYNC(14, "keyword"),
    AWAIT(15, "keyword"),
    BASE(16, "keyword"),
    BOOL(17, "keyword"),
    BREAK(18, "keyword"),
    BY(19, "keyword"),
    BYTE(20, "keyword"),
    CASE(21, "keyword"),
    CATCH(22, "keyword"),
    CHAR(23, "keyword"),
    CHECKED(24, "keyword"),
    CLASS(25, "keyword"),
    CONST(26, "keyword"),
    CONTINUE(27, "keyword"),
    DECIMAL(28, "keyword"),
    DEFAULT(29, "keyword"),
    DELEGATE(30, "keyword"),
    DESCENDING(31, "keyword"),
    DO(32, "keyword"),
    DOUBLE(33, "keyword"),
    DYNAMIC(34, "keyword"),
    ELSE(35, "keyword"),
    ENUM(36, "keyword"),
    EQUALS(37, "keyword"),
    EVENT(38, "keyword"),
    EXPLICIT(39, "keyword"),
    EXTERN(40, "keyword"),
    FALSE(41, "keyword"),
    FINALLY(42, "keyword"),
    FIXED(43, "keyword"),
    FLOAT(44, "keyword"),
    FOR(45, "keyword"),
    FOREACH(46, "keyword"),
    FROM(47, "keyword"),
    GET(48, "keyword"),
    GOTO(49, "keyword"),
    GROUP(50, "keyword"),
    IF(51, "keyword"),
    IMPLICIT(52, "keyword"),
    IN(53, "keyword"),
    INT(54, "keyword"),
    INTERFACE(55, "keyword"),
    INTERNAL(56, "keyword"),
    INTO(57, "keyword"),
    IS(58, "keyword"),
    JOIN(59, "keyword"),
    LET(60, "keyword"),
    LOCK(61, "keyword"),
    LONG(62, "keyword"),
    NAMEOF(63, "keyword"),
    NAMESPACE(64, "keyword"),
    NEW(65, "keyword"),
    NULL(66, "keyword"),
    OBJECT(67, "keyword"),
    ON(68, "keyword"),
    OPERATOR(69, "keyword"),
    ORDERBY(70, "keyword"),
    OUT(71, "keyword"),
    OVERRIDE(72, "keyword"),
    PARAMS(73, "keyword"),
    PARTIAL(74, "keyword"),
    PRIVATE(75, "keyword"),
    PROTECTED(76, "keyword"),
    PUBLIC(77, "keyword"),
    READONLY(78, "keyword"),
    REF(79, "keyword"),
    REMOVE(80, "keyword"),
    RETURN(81, "keyword"),
    SBYTE(82, "keyword"),
    SEALED(83, "keyword"),
    SELECT(84, "keyword"),
    SET(85, "keyword"),
    SHORT(86, "keyword"),
    SIZEOF(87, "keyword"),
    STACKALLOC(88, "keyword"),
    STATIC(89, "keyword"),
    STRING(90, "keyword"),
    STRUCT(91, "keyword"),
    SWITCH(92, "keyword"),
    THIS(93, "keyword"),
    THROW(94, "keyword"),
    TRUE(95, "keyword"),
    TRY(96, "keyword"),
    TYPEOF(97, "keyword"),
    UINT(98, "keyword"),
    ULONG(99, "keyword"),
    UNCHECKED(100, "keyword"),
    UNSAFE(101, "keyword"),
    USHORT(102, "keyword"),
    USING(103, "keyword"),
    VAR(104, "keyword"),
    VIRTUAL(105, "keyword"),
    VOID(106, "keyword"),
    VOLATILE(107, "keyword"),
    WHEN(108, "keyword"),
    WHERE(109, "keyword"),
    WHILE(110, "keyword"),
    YIELD(111, "keyword"),
    IDENTIFIER(112, "identifier"),
    LITERAL_ACCESS(113, "text"),
    INTEGER_LITERAL(114, "literal"),
    HEX_INTEGER_LITERAL(115, "literal"),
    REAL_LITERAL(116, "literal"),
    CHARACTER_LITERAL(117, "literal"),
    REGULAR_STRING(118, "literal"),
    VERBATIUM_STRING(119, "literal"),
    INTERPOLATED_REGULAR_STRING_START(120, "literal"),
    INTERPOLATED_VERBATIUM_STRING_START(121, "literal"),
    OPEN_BRACE(122, "operator"),
    CLOSE_BRACE(123, "operator"),
    OPEN_BRACKET(124, "operator"),
    CLOSE_BRACKET(125, "operator"),
    OPEN_PARENS(126, "operator"),
    CLOSE_PARENS(127, "operator"),
    DOT(128, "operator"),
    COMMA(129, "operator"),
    COLON(130, "operator"),
    SEMICOLON(131, "operator"),
    PLUS(132, "operator"),
    MINUS(133, "operator"),
    STAR(134, "operator"),
    DIV(135, "operator"),
    PERCENT(136, "operator"),
    AMP(137, "operator"),
    BITWISE_OR(138, "operator"),
    CARET(139, "operator"),
    BANG(140, "operator"),
    TILDE(141, "operator"),
    ASSIGNMENT(142, "operator"),
    LT(143, "operator"),
    GT(144, "operator"),
    INTERR(145, "operator"),
    DOUBLE_COLON(146, "operator"),
    OP_COALESCING(147, "operator"),
    OP_INC(148, "operator"),
    OP_DEC(149, "operator"),
    OP_AND(150, "operator"),
    OP_OR(151, "operator"),
    OP_PTR(152, "operator"),
    OP_EQ(153, "operator"),
    OP_NE(154, "operator"),
    OP_LE(155, "operator"),
    OP_GE(156, "operator"),
    OP_ADD_ASSIGNMENT(157, "operator"),
    OP_SUB_ASSIGNMENT(158, "operator"),
    OP_MULT_ASSIGNMENT(159, "operator"),
    OP_DIV_ASSIGNMENT(160, "operator"),
    OP_MOD_ASSIGNMENT(161, "operator"),
    OP_AND_ASSIGNMENT(162, "operator"),
    OP_OR_ASSIGNMENT(163, "operator"),
    OP_XOR_ASSIGNMENT(164, "operator"),
    OP_LEFT_SHIFT(165, "operator"),
    OP_LEFT_SHIFT_ASSIGNMENT(166, "operator"),
    DOUBLE_CURLY_INSIDE(167, "operator"),
    OPEN_BRACE_INSIDE(168, "operator"),
    REGULAR_CHAR_INSIDE(169, "operator"),
    VERBATIUM_DOUBLE_QUOTE_INSIDE(170, "operator"),
    DOUBLE_QUOTE_INSIDE(171, "operator"),
    REGULAR_STRING_INSIDE(172, "operator"),
    VERBATIUM_INSIDE_STRING(173, "operator"),
    CLOSE_BRACE_INSIDE(174, "operator"),
    FORMAT_STRING(175, "operator"),
    DIRECTIVE_WHITESPACES(176, "whitespace"),
    DIGITS(177, "literal"),
    DEFINE(178, "keyword"),
    UNDEF(179, "keyword"),
    ELIF(180, "keyword"),
    ENDIF(181, "keyword"),
    LINE(182, "whitespace"),
    ERROR(183, "text"),
    WARNING(184, "text"),
    REGION(185, "keyword"),
    ENDREGION(186, "keywords"),
    PRAGMA(187, "keyword"),
    DIRECTIVE_HIDDEN(188, "text"),
    CONDITIONAL_SYMBOL(189, "character"),
    DIRECTIVE_NEW_LINE(190, "character"),
    TEXT(191, "text"),
    DOUBLE_CURLY_CLOSE_INSIDE(192, "operator");

    public int id;
    public String category;
    public String text;

    private TokenType(int id, String category) {
        this.id = id;
        this.category = category;
    }

    public static TokenType valueOf(int id) {
        TokenType[] values = values();

        for (TokenType value : values) {
            if (value.id == id) {
                return value;
            }
        }

        throw new IllegalArgumentException("The id " + id + " is not recognized");
    }
}
